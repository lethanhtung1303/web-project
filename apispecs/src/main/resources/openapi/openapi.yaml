openapi: 3.0.0
info:
  title: Web Project API
  description: Api connect to Database
  version: 0.0.1
  license:
    name: TDTU Web Project
servers:
  - url: http://XXXXX/v1
    description: Develop server
  - url: http://XXXXX.com
    description: Product server
paths:
  /v1/searchUser:
    post:
      tags:
        - User
      summary: Api return list user with condition in request body
      operationId: searchUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSearchRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: User list form database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersSearchResponse'
  /v1/updateUser:
    post:
      tags:
        - User
      summary: Api for update info of user
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateResponse'
  /v1/createUser:
    post:
      tags:
        - User
      summary: Api for create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
  /v1/getUser:
    get:
      tags:
        - User
      summary: Api for get user by UserId
      operationId: getUser
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            pattern: '^[0-9]{1,19}$'
            example: '123456'
          required: true
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
  /v1/deleteUser:
    delete:
      tags:
        - User
      summary: Api for delete user
      operationId: deleteUser
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            pattern: '^[0-9]{1,19}$'
            example: '123456'
          required: true
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status delete user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeleteResponse'
  /v1/changePassword:
    post:
      tags:
        - User
      summary: Api for change password user
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassResponse'
  /v1/login:
    post:
      tags:
        - User
      summary: Api for login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /v1/getAllPropertyType:
    get:
      tags:
        - Property
      summary: Api for get all type of property
      operationId: getAllPropertyType
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: All Type Name Of Property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPropertyTypeResponse'
  /v1/searchProperty:
    post:
      tags:
        - Property
      summary: Api for search property
      operationId: searchProperty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchPropertyRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Search property in data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPropertyResponse'
  /v1/createProperty:
    post:
      tags:
        - Property
      summary: Api for create property
      operationId: createProperty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyCreateRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyCreateResponse'
  /v1/updateProperty:
    post:
      tags:
        - Property
      summary: Api for update info of Property
      operationId: updateProperty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyUpdateRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update Property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyUpdateResponse'
  /v1/deleteProperty:
    delete:
      tags:
        - Property
      summary: Api for delete property
      operationId: deleteProperty
      parameters:
        - name: propertyId
          in: query
          schema:
            type: string
            pattern: '^[0-9]{1,19}$'
            example: '123456'
          required: true
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status delete user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDeleteResponse'
  /v1/getProperty:
    get:
      tags:
        - Property
      summary: Api for get Property by PropertyId
      operationId: getProperty
      parameters:
        - name: propertyId
          in: query
          schema:
            type: string
            pattern: '^[0-9]{1,19}$'
            example: '123456'
          required: true
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyGetResponse'
  /v1/getAllStoreByUser:
    get:
      tags:
        - Store
      summary: Api for get all Store by UserId
      operationId: getAllStoreByUser
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            pattern: '^[0-9]{1,19}$'
            example: '123456'
          required: true
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Store List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreGetAllResponse'
  /v1/updateStore:
    post:
      tags:
        - Store
      summary: Api for update Store
      operationId: updateStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUpdateRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreUpdateResponse'
  /v1/createNews:
    post:
      tags:
        - News
      summary: Api for create News
      operationId: createNews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsCreateRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsCreateResponse'
  /v1/updateNews:
    post:
      tags:
        - News
      summary: Api for update News
      operationId: updateNews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsUpdateRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsUpdateResponse'
  /v1/deleteNews:
    delete:
      tags:
        - News
      summary: Api for delete news
      operationId: deleteNews
      parameters:
        - name: newsId
          in: query
          schema:
            type: string
            pattern: '^[0-9]{1,19}$'
            example: '123456'
          required: true
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status delete news
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsDeleteResponse'
  /v1/searchNews:
    post:
      tags:
        - News
      summary: Api for search news
      operationId: searchNews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsSearchRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Search news in data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsSearchResponse'
  /v1/getNews:
    get:
      tags:
        - News
      summary: Api for get News by NewsId
      operationId: getNews
      parameters:
        - name: newsId
          in: query
          schema:
            type: string
            pattern: '^[0-9]{1,19}$'
            example: '123456'
          required: true
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsGetResponse'
  /v1/createContact:
    post:
      tags:
        - Contact
      summary: Api for create Contact
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactCreateRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactCreateResponse'
  /v1/handleContact:
    post:
      tags:
        - Contact
      summary: Api for handle Contact
      operationId: handleContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactHandleRequest'
      responses:
        400:
          $ref: '#/components/responses/webApiValidationError'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        200:
          description: Status update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactHandleResponse'

components:
  parameters:
    xForwardedRole:
      in: header
      name: x-forwarder-role
      required: true
      schema:
        type: string
    xForwardedEmployeeId:
      in: header
      name: x-forwarder-employee-id
      required: true
      schema:
        type: string
    xForwardedUser:
      in: header
      name: x-forwarder-user
      required: true
      schema:
        type: string
  schemas:
    WebApiErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        results:
          type: array
          items:
            $ref: '#/components/schemas/WebApiErrorDetails'
    WebApiErrorDetails:
      type: object
      properties:
        field:
          type: string
        errorCd:
          type: string
        message:
          type: string
        errorIdList:
          type: array
          items:
            type: integer
            example: 1
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 400
        message:
          type: string
    UserSearchRequest:
      type: object
      properties:
        email:
          description: Email of user
          type: string
          example: 'username@domain.com'
          pattern: '^\w+([.\-]?\w+)*@\w+([.\-]?\w+)*(\.\w{2,3})+$'
          maxLength: 200
        stdId:
          description: Student ID of user
          type: string
          example: '123456'
          maxLength: 200
        userName:
          description: Name of user
          type: string
          example: 'user'
          maxLength: 200
        address:
          description: Address of user
          type: string
          example: '164, Tan My'
          maxLength: 200
        idCard:
          description: ID Card number of user
          type: string
          example: '123456'
          maxLength: 200
        phone:
          description: Phone number of user
          type: string
          example: '123456'
          pattern: '^(84|0[3|5|7|8|9])+([0-9]{8})\b$'
          maxLength: 10
        offset:
          description: The offset rows before beginning to return the rows
          type: integer
          format: int32
          minimum: 0
          example: 1
        limit:
          description: The number of rows
          type: integer
          format: int32
          minimum: 1
          example: 20
    UsersSearchResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        results:
          type: object
          properties:
            users:
              description: Users list
              type: array
              items:
                $ref: '#/components/schemas/UserResponse'
            resultsTotalCount:
              description: Number of user with condition
              type: integer
              format: int64
              example: 1000
    UserResponse:
      type: object
      properties:
        userId:
          description: ID of user
          type: string
          example: '123456'
        userName:
          description: Name of user
          type: string
          example: 'user'
        approveStatus:
          description: Status of user
          type: string
          example: 'APPROVED'
        stdId:
          description: Student ID of user
          type: string
          example: '123456'
        address:
          description: Address of user
          type: string
          example: '164, Tan My'
        idCard:
          description: ID card of user
          type: string
          example: '123456'
        fCard:
          description: Front of the user's identity card photo
          type: string
          example: '123456'
        bCard:
          description: Back of the user's identity card photo
          type: string
          example: '123456'
        portrait:
          description: User portrait photo
          type: string
          example: '123456'
        phone:
          description: Phone of user
          type: string
          example: '0900000000'
        email:
          description: Email of user
          type: string
          example: '0900000000'
        password:
          description: Password of user
          type: string
          example: '************'
        roleId:
          description: roleId of user
          type: string
          example: '123456'
        roleName:
          description: roleName of user
          type: string
          example: '123456'
        createUserId:
          description: Id of user create
          type: string
          example: 'user'
        createUserName:
          description: Name of user create
          type: string
          example: 'user'
        createDatetime:
          description: Date time create user
          type: string
          example: '2020/04/01'
        lastupUserId:
          description: Id of user update
          type: string
          example: 'user'
        lastupUserName:
          description: Name of user update
          type: string
          example: 'user'
        lastupDatetime:
          description: Last date time update user
          type: string
          example: '2020/04/01'
    UserUpdateRequest:
      type: object
      required:
        - userId
        - userName
        - lastupUserId
      properties:
        userId:
          description: ID of user
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        lastupUserId:
          description: ID of user to create
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        stdId:
          description: Student ID of user
          type: string
          example: '123456'
          maxLength: 64
        userName:
          description: Name of user
          type: string
          example: 'user'
          maxLength: 64
        address:
          description: Address of user
          type: string
          example: '164, Tan My'
          maxLength: 200
        idCard:
          description: ID Card number of user
          type: string
          example: '123456'
          maxLength: 64
        fCard:
          description: Front of the user's identity card photo
          type: string
          example: '123456'
          maxLength: 200
        bCard:
          description: Back of the user's identity card photo
          type: string
          example: '123456'
          maxLength: 200
        portrait:
          description: User portrait photo
          type: string
          example: '123456'
          maxLength: 200
    UserUpdateResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the update user
          type: string
          example: 'OK'
    UserCreateRequest:
      type: object
      required:
        - email
        - password
        - roleId
        - createUserId
        - userName
        - phone
      properties:
        email:
          description: Email of user
          type: string
          example: 'username@domain.com'
          pattern: '^\w+([.\-]?\w+)*@\w+([.\-]?\w+)*(\.\w{2,3})+$'
          maxLength: 200
        password:
          description: Password of user
          type: string
          example: '123456'
          minLength: 6
          maxLength: 64
        roleId:
          description: ID of role
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        createUserId:
          description: ID of user to create
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        stdId:
          description: Student ID of user
          type: string
          example: '123456'
          maxLength: 64
        userName:
          description: Name of user
          type: string
          example: 'user'
          minLength: 1
          maxLength: 64
        address:
          description: Address of user
          type: string
          example: '164, Tan My'
          maxLength: 200
        idCard:
          description: ID Card number of user
          type: string
          example: '123456'
          maxLength: 64
        fCard:
          description: Front of the user's identity card photo
          type: string
          example: '123456'
          maxLength: 200
        bCard:
          description: Back of the user's identity card photo
          type: string
          example: '123456'
          maxLength: 200
        portrait:
          description: User portrait photo
          type: string
          example: '123456'
          maxLength: 200
        phone:
          description: Phone number of user
          type: string
          example: '123456'
          pattern: '^(84|0[3|5|7|8|9])+([0-9]{8})\b$'
          maxLength: 10
    UserCreateResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the create user
          type: string
          example: 'OK'
    UserGetResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
    UserDeleteResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the delete user
          type: string
          example: 'OK'
    ChangePassRequest:
      type: object
      required:
        - userId
        - passwordOld
        - password
        - passwordConfirm
        - lastupUserId
      properties:
        userId:
          description: ID of user
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        lastupUserId:
          description: ID of user to create
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        passwordOld:
          description: Password of user
          type: string
          example: '123456'
          minLength: 6
          maxLength: 64
        password:
          description: Password of user
          type: string
          example: '123456'
          minLength: 6
          maxLength: 64
        passwordConfirm:
          description: Password of user
          type: string
          example: '123456'
          minLength: 6
          maxLength: 64
    ChangePassResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the change pass
          type: string
          example: 'OK'
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          description: Email of user
          type: string
          example: 'username@domain.com'
          pattern: '^\w+([.\-]?\w+)*@\w+([.\-]?\w+)*(\.\w{2,3})+$'
          maxLength: 200
        password:
          description: Password of user
          type: string
          example: '123456'
          minLength: 6
          maxLength: 64
    LoginResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the login
          type: string
          example: 'OK'
    AllPropertyTypeResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        results:
          type: object
          properties:
            resultsTotalCount:
              description: Number of user with condition
              type: integer
              format: int64
              example: 1000
            typeProperties:
              description: List of name type property
              type: array
              items:
                $ref: '#/components/schemas/PropertyTypeResponse'
    PropertyTypeResponse:
      type: object
      properties:
        nameProperty:
          description: Name type type property
          type: string
          example: '123456'
        totalProperty:
          description: Number of property with type
          type: integer
          format: int64
          example: 1000
    SearchPropertyRequest:
      x-custom-validate:
        date-range:
          - from: 'createDatetimeFrom'
            to: 'createDatetimeTo'
      type: object
      properties:
        userId:
          description: ID of property
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        userName:
          description: userName of user create property
          type: string
          example: '123456'
          maxLength: 200
        typeId:
          description: Type ID of property
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        title:
          description: Title of property
          type: string
          example: '123456'
          maxLength: 200
        address:
          description: Address of property
          type: string
          example: '123456'
          maxLength: 200
        createDatetimeFrom:
          description: Date time create product
          type: string
          example: '123456'
          pattern: '^(0[1-9]|1\d|2[0-8]|29(?=\/\d\d\/(?!1[01345789]00|2[1235679]00)\d\d(?:[02468][048]|[13579][26]))|30(?!\/02)|31(?=\/0[13578]|\/1[02]))\/(0[1-9]|1[0-2])\/([12]\d{3})$'
        createDatetimeTo:
          description: Date time create product
          type: string
          example: '123456'
          pattern: '^(0[1-9]|1\d|2[0-8]|29(?=\/\d\d\/(?!1[01345789]00|2[1235679]00)\d\d(?:[02468][048]|[13579][26]))|30(?!\/02)|31(?=\/0[13578]|\/1[02]))\/(0[1-9]|1[0-2])\/([12]\d{3})$'
        amountFrom:
          description: Amount of property
          type: string
          example: '123456'
          pattern: '^[0-9]{1,9}$'
        amountTo:
          description: Amount of property
          type: string
          example: '123456'
          pattern: '^[0-9]{1,9}$'
        areaFrom:
          description: Area of property
          type: string
          example: '123456'
          pattern: '^[0-9]{1,9}$'
        areaTo:
          description: Area of property
          type: string
          example: '123456'
          pattern: '^[0-9]{1,9}$'
        offset:
          description: The offset rows before beginning to return the rows
          type: integer
          format: int32
          minimum: 0
          example: 1
        limit:
          description: The number of rows
          type: integer
          format: int32
          minimum: 1
          example: 20
    SearchPropertyResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        results:
          type: object
          properties:
            resultsTotalCount:
              description: Number of property with condition
              type: integer
              format: int64
              example: 1000
            properties:
              description: Property list
              type: array
              items:
                $ref: '#/components/schemas/PropertyResponse'
    PropertyResponse:
      type: object
      properties:
        propertyId:
          description: ID of property
          type: string
          example: '123456'
        typeId:
          description: ID of type property
          type: string
          example: '123456'
        typeName:
          description: Name of type property
          type: string
          example: 'xxxxx'
        createUserId:
          description: ID of user create property
          type: string
          example: '123456'
        createUserName:
          description: Name of user create property
          type: string
          example: 'xxxxx'
        createDatetime:
          description: Date-time create property
          type: string
          example: '2022-12-20 00:00:00'
        lastupUserId:
          description: ID of user lastup property
          type: string
          example: '123456'
        lastupUserName:
          description: Name of user lastup property
          type: string
          example: 'xxxxx'
        lastupDatetime:
          description: Date-time lastup property
          type: string
          example: '2022-12-20 00:00:00'
        title:
          description: title of property
          type: string
          example: '2022-12-20 00:00:00'
        address:
          description: Address of property
          type: string
          example: 'Ho Chi Minh'
        amount:
          description: Amount of property
          type: string
          example: '1000000'
        area:
          description: Area of property
          type: string
          example: '10'
        description:
          description: Description of property
          type: string
          example: 'xxxxx'
        approveStatus:
          description: Approve Status of property
          type: string
          example: 'APPROVE'
        propertyImg:
          description: List of IMG property
          type: array
          items:
            description: Link of img property
            type: string
            example: 'xxxxxx'
    PropertyCreateRequest:
      type: object
      required:
        - typeId
        - createUserId
        - title
        - address
        - amount
        - area
        - description
        - propertyImg
      properties:
        typeId:
            description: ID of type property
            type: string
            example: '123456'
            pattern: '^[0-9]{1,19}$'
        createUserId:
            description: ID of user create property
            type: string
            example: '123456'
            pattern: '^[0-9]{1,19}$'
        title:
          description: Title of property
          type: string
          example: 'xxxxx'
          maxLength: 200
        address:
          description: Address of property
          type: string
          example: 'xxxxx'
          maxLength: 200
        amount:
          description: Amount of property
          type: string
          example: '100000'
          pattern: '^[0-9]{1,9}$'
          maxLength: 9
        area:
          description: Area of property
          type: string
          example: '100000'
          pattern: '^[0-9]{1,9}$'
          maxLength: 9
        description:
          description: Description of property
          type: string
          example: 'xxxxx'
          maxLength: 40000
        propertyImg:
          description: Image list
          type: array
          minItems: 3
          maxItems: 12
          items:
            description: Link of image
            type: string
            example: 'xxxxx'
            maxLength: 200
    PropertyCreateResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the create property
          type: string
          example: 'OK'
    PropertyUpdateRequest:
      type: object
      required:
        - propertyId
        - typeId
        - title
        - address
        - amount
        - area
        - description
        - propertyImg
        - lastupUserId
      properties:
        propertyId:
          description: ID of property
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        typeId:
          description: ID of user
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        title:
          description: Title of property
          type: string
          example: 'xxxxx'
          maxLength: 200
        address:
          description: Address of property
          type: string
          example: 'xxxxx'
          maxLength: 200
        amount:
          description: Amount of property
          type: string
          example: '100000'
          pattern: '^[0-9]{1,9}$'
          maxLength: 9
        area:
          description: Area of property
          type: string
          example: '100000'
          pattern: '^[0-9]{1,9}$'
          maxLength: 9
        description:
          description: Description of property
          type: string
          example: 'xxxxx'
          maxLength: 40000
        propertyImg:
          description: Image list
          type: array
          minItems: 3
          maxItems: 12
          items:
            description: Link of image
            type: string
            example: 'xxxxx'
            maxLength: 200
        lastupUserId:
          description: ID of user to create
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
    PropertyUpdateResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the update property
          type: string
          example: 'OK'
    PropertyDeleteResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the delete property
          type: string
          example: 'OK'
    PropertyGetResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        results:
          type: array
          items:
            $ref: '#/components/schemas/PropertyResponse'
    StoreGetAllResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        results:
          type: object
          properties:
            resultsTotalCount:
              description: Number of property with condition
              type: integer
              format: int64
              example: 1000
            stores:
              description: Store list
              type: array
              items:
                description: Store List of Us
                type: string
                example: 'xxxxxx'
    StoreUpdateRequest:
      type: object
      required:
        - propertyId
        - createUserId
      properties:
        propertyId:
          description: ID of property
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        createUserId:
          description: ID of user to create
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
    StoreUpdateResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the update store
          type: string
          example: 'OK'
    NewsCreateRequest:
      type: object
      required:
        - title
        - content
        - createUserId
      properties:
        title:
          description: Title of news
          type: string
          example: 'xxxxx'
          maxLength: 4000
        content:
          description: Content of news
          type: string
          example: 'xxxxx'
          maxLength: 4000
        createUserId:
          description: ID of user create news
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        cover:
          description: Link of cover
          type: string
          example: 'xxxxx'
          maxLength: 200
    NewsCreateResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the create news
          type: string
          example: 'OK'
    NewsUpdateRequest:
      type: object
      required:
        - newsId
        - title
        - content
        - lastupUserId
      properties:
        newsId:
          description: ID of news
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        title:
          description: Title of news
          type: string
          example: 'xxxxx'
          maxLength: 4000
        content:
          description: Content of news
          type: string
          example: 'xxxxx'
          maxLength: 4000
        lastupUserId:
          description: ID of user update news
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        cover:
          description: Link of cover
          type: string
          example: 'xxxxx'
          maxLength: 200
    NewsUpdateResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the update news
          type: string
          example: 'OK'
    NewsDeleteResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the delete news
          type: string
          example: 'OK'
    NewsSearchRequest:
      x-custom-validate:
        date-range:
          - from: 'createDatetimeFrom'
            to: 'createDatetimeTo'
      type: object
      properties:
        title:
          description: Title of news
          type: string
          example: 'xxxxx'
          maxLength: 4000
        userName:
          description: Name of user
          type: string
          example: 'user'
          maxLength: 200
        createDatetimeFrom:
          description: Date time create product
          type: string
          example: '123456'
          pattern: '^(0[1-9]|1\d|2[0-8]|29(?=\/\d\d\/(?!1[01345789]00|2[1235679]00)\d\d(?:[02468][048]|[13579][26]))|30(?!\/02)|31(?=\/0[13578]|\/1[02]))\/(0[1-9]|1[0-2])\/([12]\d{3})$'
        createDatetimeTo:
          description: Date time create product
          type: string
          example: '123456'
          pattern: '^(0[1-9]|1\d|2[0-8]|29(?=\/\d\d\/(?!1[01345789]00|2[1235679]00)\d\d(?:[02468][048]|[13579][26]))|30(?!\/02)|31(?=\/0[13578]|\/1[02]))\/(0[1-9]|1[0-2])\/([12]\d{3})$'
        offset:
          description: The offset rows before beginning to return the rows
          type: integer
          format: int32
          minimum: 0
          example: 1
        limit:
          description: The number of rows
          type: integer
          format: int32
          minimum: 1
          example: 20
    NewsSearchResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        results:
          type: object
          properties:
            resultsTotalCount:
              description: Number of new with condition
              type: integer
              format: int64
              example: 1000
            news:
              description: News list
              type: array
              items:
                $ref: '#/components/schemas/NewsResponse'
    NewsResponse:
      type: object
      properties:
        newsId:
          description: ID of news
          type: string
          example: '123456'
        title:
          description: Title of news
          type: string
          example: '123456'
        content:
          description: Content of news
          type: string
          example: 'xxxxx'
        cover:
          description: Cover of news
          type: string
          example: '123456'
        createUserId:
          description: ID of user create news
          type: string
          example: '123456'
        createUserName:
          description: Name of user create news
          type: string
          example: 'xxxxx'
        createDatetime:
          description: Date-time create news
          type: string
          example: '2022-12-20 00:00:00'
        lastupUserId:
          description: ID of user lastup news
          type: string
          example: '123456'
        lastupUserName:
          description: Name of user lastup news
          type: string
          example: 'xxxxx'
        lastupDatetime:
          description: Date-time lastup news
          type: string
          example: '2022-12-20 00:00:00'
    NewsGetResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        results:
          type: array
          items:
            $ref: '#/components/schemas/NewsResponse'
    ContactCreateRequest:
      type: object
      required:
        - content
        - email
      properties:
        email:
          description: Email of user create Contact
          type: string
          example: 'username@domain.com'
          pattern: '^\w+([.\-]?\w+)*@\w+([.\-]?\w+)*(\.\w{2,3})+$'
          maxLength: 200
        content:
          description: Content of news
          type: string
          example: 'xxxxx'
          maxLength: 4000
        phone:
          description: Phone number of user create Contact
          type: string
          example: '123456'
          pattern: '^(84|0[3|5|7|8|9])+([0-9]{8})\b$'
          maxLength: 10
    ContactCreateResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the create Contact
          type: string
          example: 'OK'
    ContactHandleRequest:
      type: object
      required:
        - contactId
        - lastupUserId
      properties:
        contactId:
          description: ID of Contact
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
        lastupUserId:
          description: ID of user to handle
          type: string
          example: '123456'
          pattern: '^[0-9]{1,19}$'
    ContactHandleResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          description: Message of the handle Contact
          type: string
          example: 'OK'
  responses:
    webApiValidationError:
      description: webApi input value validation failure
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/WebApiErrorResponse'
            properties:
              status:
                example: 400
    400:
      description: Format check failed
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            properties:
              status:
                example: 400
              error:
                example: Bad Request
    401:
      description: Restrict access
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            properties:
              status:
                example: 401
              error:
                example: Unauthorized
    403:
      description: Access request denied
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            properties:
              status:
                example: 403
              error:
                example: Forbidden
    404:
      description: Page not found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            properties:
              status:
                example: 404
              error:
                example: Not Found
    500:
      description: The server is having problems
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
            properties:
              status:
                example: 500
              error:
                example: Internal Server Error
  headers:
    Content-Disposition:
      schema:
        type: string